buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.3'
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

apply plugin: 'com.android.application'

//依赖
dependencies {
    compile fileTree(include: '*.jar', dir: 'libs')
    // Because RxAndroid releases are few and far between, it is recommended you also
    // explicitly depend on RxJava's latest version for bug fixes and new features.
    compile project(':PushSDK')

    compile ('com.android.support:design:22.2.1'){
        exclude group: 'com.android.support', module: 'support-v4'
    }
    compile 'com.android.support:recyclerview-v7:25.1.0'
    compile 'com.squareup.okhttp3:okhttp:3.4.2'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'io.reactivex.rxjava2:rxjava:2.0.1'
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    compile "com.android.support:support-v4:24.2.0"
}

android {
    compileSdkVersion 21
    buildToolsVersion "24.0.2"

    defaultConfig {
        applicationId 'com.cuan.launcher'
        minSdkVersion 17
        targetSdkVersion 21
        versionCode 10000
        versionName "1.0.0"

        ndk {
            //生成的apk中就会排出多余的平台文件了
            abiFilters "armeabi", "armeabi-v7a" ,"x86"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    // 移除lint检查的error
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }

    //签名信息
    signingConfigs { debug{
        }

        releaseConfig {
            try {
                storeFile file("../Launcher3/cuan.keystore")
                storePassword KEYSTORE_PASSWORD
                keyAlias "cuan"
                keyPassword KEY_PASSWORD
            }
            catch (ex) {
                throw new InvalidUserDataException(ex.message)
            }
        }
    }

    buildTypes {

        release {
            //是否开启混淆
            minifyEnabled true
            //是否zip优化
            zipAlignEnabled true
            //删除一些无用资源
            shrinkResources false
            //签名所用的配置文件
            signingConfig signingConfigs.releaseConfig
            //混淆所用的文件
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'
        }

    }

}

//gradle 命令
//   ./gradlew -v 版本号
//   ./gradlew clean 清除项目目录下的build文件夹
//   ./gradlew build 检查依赖并编译打包
//   ./gradlew build  编译并打debug、release包
//   ./gradlew assembleDebug  编译并打Debug包
//   ./gradlew assembleRelease 编译并打Release的包



